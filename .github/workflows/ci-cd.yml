name: Advanced Traffic Management CI/CD

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  # Static code analysis and linting
  analyze:
    name: Static Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [go, rust, python, typescript]
        include:
          - language: go
            path: ./backend/api-gateway
          - language: rust
            path: ./backend/core-engine
          - language: python
            path: ./ml
          - language: typescript
            path: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: ${{ matrix.path }}/go.sum
          
      - name: Analyze Go Code
        if: matrix.language == 'go'
        run: |
          cd ${{ matrix.path }}
          go vet ./...
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2
          golangci-lint run
          
      - name: Setup Rust
        if: matrix.language == 'rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          
      - name: Analyze Rust Code
        if: matrix.language == 'rust'
        run: |
          cd ${{ matrix.path }}
          cargo clippy -- -D warnings
          cargo fmt -- --check
          
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Analyze Python Code
        if: matrix.language == 'python'
        run: |
          cd ${{ matrix.path }}
          pip install black flake8 pylint mypy
          black --check .
          flake8 .
          pylint --disable=C0111,R0903 **/*.py
          mypy --ignore-missing-imports --disallow-untyped-defs .
          
      - name: Setup Node.js
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json
          
      - name: Analyze TypeScript Code
        if: matrix.language == 'typescript'
        run: |
          cd ${{ matrix.path }}
          npm ci
          npm run lint
          npm run type-check

  # Test services in parallel
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: analyze
    strategy:
      matrix:
        component: [core-engine, api-gateway, prediction-service, computer-vision, signal-control, frontend-admin, frontend-operator]
        include:
          - component: core-engine
            path: ./backend/core-engine
            language: rust
            cmd: cargo test --all-features
          - component: api-gateway
            path: ./backend/api-gateway
            language: go
            cmd: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          - component: prediction-service
            path: ./ml/prediction-service
            language: python
            cmd: pytest --cov=app --cov-report=xml
          - component: computer-vision
            path: ./ml/computer-vision
            language: python
            cmd: pytest --cov=app --cov-report=xml
          - component: signal-control
            path: ./backend/signal-control
            language: go
            cmd: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          - component: frontend-admin
            path: ./frontend/admin-dashboard
            language: typescript
            cmd: npm test -- --coverage
          - component: frontend-operator
            path: ./frontend/operator-console
            language: typescript
            cmd: npm test -- --coverage
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: bitnami/kafka:3.5
        ports:
          - 9092:9092
        env:
          KAFKA_CFG_NODE_ID: 0
          KAFKA_CFG_PROCESS_ROLES: controller,broker
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          ALLOW_PLAINTEXT_LISTENER: yes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: ${{ matrix.path }}/go.sum
      
      - name: Setup Rust
        if: matrix.language == 'rust'
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ${{ matrix.path }}/requirements.txt
      
      - name: Setup Node.js
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json
      
      - name: Install Go dependencies
        if: matrix.language == 'go'
        run: |
          cd ${{ matrix.path }}
          go mod download
      
      - name: Install Rust dependencies
        if: matrix.language == 'rust'
        run: |
          cd ${{ matrix.path }}
          cargo build --all-features
      
      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          cd ${{ matrix.path }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Install Node.js dependencies
        if: matrix.language == 'typescript'
        run: |
          cd ${{ matrix.path }}
          npm ci
      
      - name: Run tests
        run: |
          cd ${{ matrix.path }}
          ${{ matrix.cmd }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
          TESTING: "true"
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ${{ matrix.path }}/coverage.txt,${{ matrix.path }}/coverage.xml,${{ matrix.path }}/coverage/coverage-final.json
          flags: ${{ matrix.component }}
          name: codecov-${{ matrix.component }}
          fail_ci_if_error: false

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Start Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to start
      
      - name: Run Integration Tests
        run: |
          cd tests/integration
          npm install
          npm test
      
      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          docker compose -f docker-compose.test.yml logs > logs/integration-test.log
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: logs/
      
      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  # Performance tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Start Docker Compose
        run: |
          docker compose -f docker-compose.perf.yml up -d
          sleep 30  # Wait for services to start
      
      - name: Run k6 Performance Tests
        run: |
          docker run --network host -v ${PWD}/tests/performance:/scripts grafana/k6:latest run /scripts/load-test.js
      
      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.perf.yml down -v

  # Build Docker images
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        component: [core-engine, api-gateway, prediction-service, computer-vision, signal-control, admin-dashboard, operator-console]
        include:
          - component: core-engine
            path: ./backend/core-engine
            dockerfile: Dockerfile
          - component: api-gateway
            path: ./backend/api-gateway
            dockerfile: Dockerfile
          - component: prediction-service
            path: ./ml/prediction-service
            dockerfile: Dockerfile
          - component: computer-vision
            path: ./ml/computer-vision
            dockerfile: Dockerfile
          - component: signal-control
            path: ./backend/signal-control
            dockerfile: Dockerfile
          - component: admin-dashboard
            path: ./frontend/admin-dashboard
            dockerfile: Dockerfile
          - component: operator-console
            path: ./frontend/operator-console
            dockerfile: Dockerfile
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long,prefix=
      
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    concurrency: staging-environment
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
      
      - name: Update image tags in Kustomize
        run: |
          cd k8s/overlays/staging
          
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Update image references in kustomization.yaml
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/core-engine=ghcr.io/${{ github.repository }}/core-engine:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/api-gateway=ghcr.io/${{ github.repository }}/api-gateway:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/prediction-service=ghcr.io/${{ github.repository }}/prediction-service:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/computer-vision=ghcr.io/${{ github.repository }}/computer-vision:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/signal-control=ghcr.io/${{ github.repository }}/signal-control:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/admin-dashboard=ghcr.io/${{ github.repository }}/admin-dashboard:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/operator-console=ghcr.io/${{ github.repository }}/operator-console:sha-$COMMIT_SHA
      
      - name: Deploy to Kubernetes cluster
        run: |
          cd k8s/overlays/staging
          kustomize build | kubectl apply -f -
      
      - name: Wait for deployments to be ready
        run: |
          kubectl rollout status deployment/traffic-core-engine -n traffic-management-system-staging
          kubectl rollout status deployment/api-gateway -n traffic-management-system-staging
          kubectl rollout status deployment/traffic-prediction -n traffic-management-system-staging
          kubectl rollout status deployment/computer-vision-service -n traffic-management-system-staging
          kubectl rollout status deployment/signal-control-service -n traffic-management-system-staging
          kubectl rollout status deployment/admin-dashboard -n traffic-management-system-staging
          kubectl rollout status deployment/operator-console -n traffic-management-system-staging
      
      - name: Run smoke tests
        run: |
          ./scripts/smoke-test.sh https://api.staging.traffic-management.example.com
          ./scripts/smoke-test.sh https://admin.staging.traffic-management.example.com
      
      - name: Create deployment record
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_RECORDER_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "environment": "staging",
            "service": "traffic-management-system",
            "version": "sha-${{ github.sha }}",
            "commit_url": "${{ github.event.repository.html_url }}/commit/${{ github.sha }}",
            "status": "success"
          }' \
          https://deployment-recorder.example.com/api/deployments

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    concurrency: production-environment
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
      
      - name: Update image tags in Kustomize
        run: |
          cd k8s/overlays/production
          
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Update image references in kustomization.yaml
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/core-engine=ghcr.io/${{ github.repository }}/core-engine:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/api-gateway=ghcr.io/${{ github.repository }}/api-gateway:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/prediction-service=ghcr.io/${{ github.repository }}/prediction-service:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/computer-vision=ghcr.io/${{ github.repository }}/computer-vision:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/signal-control=ghcr.io/${{ github.repository }}/signal-control:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/admin-dashboard=ghcr.io/${{ github.repository }}/admin-dashboard:sha-$COMMIT_SHA
          kustomize edit set image ghcr.io/aditya3134802/advanced-traffic-management-system/operator-console=ghcr.io/${{ github.repository }}/operator-console:sha-$COMMIT_SHA
      
      - name: Deploy to Kubernetes cluster
        run: |
          cd k8s/overlays/production
          kustomize build | kubectl apply -f -
      
      - name: Wait for deployments to be ready
        run: |
          kubectl rollout status deployment/traffic-core-engine -n traffic-management-system-production
          kubectl rollout status deployment/api-gateway -n traffic-management-system-production
          kubectl rollout status deployment/traffic-prediction -n traffic-management-system-production
          kubectl rollout status deployment/computer-vision-service -n traffic-management-system-production
          kubectl rollout status deployment/signal-control-service -n traffic-management-system-production
          kubectl rollout status deployment/admin-dashboard -n traffic-management-system-production
          kubectl rollout status deployment/operator-console -n traffic-management-system-production
      
      - name: Run smoke tests
        run: |
          ./scripts/smoke-test.sh https://api.traffic-management.example.com
          ./scripts/smoke-test.sh https://admin.traffic-management.example.com
      
      - name: Create deployment record
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_RECORDER_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "environment": "production",
            "service": "traffic-management-system",
            "version": "sha-${{ github.sha }}",
            "commit_url": "${{ github.event.repository.html_url }}/commit/${{ github.sha }}",
            "status": "success"
          }' \
          https://deployment-recorder.example.com/api/deployments
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}-${{ github.sha }}
          name: Release v${{ github.run_number }}
          body: |
            # Release v${{ github.run_number }}
            
            Commit: [${{ github.sha }}](${{ github.event.repository.html_url }}/commit/${{ github.sha }})
            
            ## Changes
            
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Docker image scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'ghcr.io/${{ github.repository }}/core-engine:sha-${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'
        continue-on-error: true
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Advanced-Traffic-Management-System'
          path: '.'
          format: 'ALL'
          out: 'reports'
          args: >
            --suppression suppression.xml
      
      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports